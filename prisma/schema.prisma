// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
  output   = "../node_modules/.prisma/client"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

/// NFT Book Platform - Wattpad Style with Blockchain
// Core concept: Each book is an NFT, with free and paid content

// Core User Model
model User {
  id        String   @id @default(uuid())
  name      String   @db.VarChar(100)
  email     String   @unique @db.VarChar(255)
  password  String   @db.VarChar(255)
  image     String?
  bio       String?  @db.Text
  isPremium Boolean  @default(false)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  userRoles     UserRole[]
  
  @@index([email])
  @@index([createdAt])
  @@map("users")
}







// User Roles System
model Role {
  id          String @id @default(uuid())
  name        String @unique @db.VarChar(50) // "author", "reader", "admin", "premium"
  description String
  permissions String @db.Text // JSON permissions

  userRoles UserRole[]

  @@map("roles")
}

model UserRole {
  id         String    @id @default(uuid())
  userId     String
  roleId     String
  assignedAt DateTime  @default(now())
  expiresAt  DateTime?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
  role Role @relation(fields: [roleId], references: [id], onDelete: Cascade)

  @@unique([userId, roleId])
  @@index([userId])
  @@map("user_roles")
}

